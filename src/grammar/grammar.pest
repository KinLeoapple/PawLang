WHITESPACE = _{ ( " " | "\t" | "\r" | "\n" | COMMENT )+ }
COMMENT    = _{ LINE_COMMENT | BLOCK_COMMENT }
LINE_COMMENT  = _{ "//" ~ (!NEWLINE ~ ANY)* }
BLOCK_COMMENT = _{ "/*" ~ (BLOCK_COMMENT | (!"*/" ~ ANY))* ~ "*/" }

program = { SOI ~ item* ~ EOI }

item = { extern_fun | fun_decl | let_decl }

fun_decl   = { KW_FNs ~ ident ~ "(" ~ param_list? ~ ")" ~ "->" ~ ty ~ block }
extern_fun = { KW_EXTERN ~ KW_FNs ~ ident ~ "(" ~ param_list? ~ ")" ~ "->" ~ ty ~ ";" }

param_list = { param ~ ("," ~ param)* }
param = { ident ~ ":" ~ ty }

let_decl = { ( KW_LET | KW_CONST ) ~ ident ~ ":" ~ ty ~ "=" ~ expr ~ ";" }

ty = { KW_Int | KW_Bool | KW_String }

block = { "{" ~ stmt* ~ tail_expr? ~ "}" }
stmt  = { let_decl | while_stmt | return_stmt | expr_stmt }

while_stmt  = { KW_WHILE ~ "(" ~ expr ~ ")" ~ block }
return_stmt = { KW_RETURN ~ expr? ~ ";" }
expr_stmt   = { expr ~ ";" }

tail_expr = { expr }

expr        = { logic_or }
logic_or    = { logic_and ~ (OP_OR  ~ logic_and)* }
logic_and   = { equality  ~ (OP_AND ~ equality )* }
equality    = { compare   ~ ((OP_EQ | OP_NE) ~ compare)* }
compare     = { add       ~ ((OP_LT | OP_LE | OP_GT | OP_GE) ~ add)* }
add         = { mult      ~ ((OP_ADD | OP_SUB) ~ mult)* }
mult        = { unary     ~ ((OP_MUL | OP_DIV) ~ unary)* }
unary       = { (OP_NOT | OP_SUB) ~ unary | postfix }
postfix     = { primary ~ ( call_suffix )* }
call_suffix = { "(" ~ arg_list? ~ ")" }
arg_list    = { expr ~ ("," ~ expr)* }

primary     = { int_lit | bool_lit | string_lit | if_expr | ident | group | block }
group       = { "(" ~ expr ~ ")" }

if_expr = { KW_IF ~ "(" ~ expr ~ ")" ~ block ~ KW_ELSE ~ block }

int_lit    = @{ "-"? ~ ASCII_DIGIT+ }
bool_lit   = { KW_true | KW_false }
string_lit = @{ "\"" ~ ( "\\\"" | "\\\\" | "\\n" | "\\t" | (!"\"" ~ ANY) )* ~ "\"" }

ident = @{ !keyword ~ (ASCII_ALPHANUMERIC | "_")+ }

keyword   = { KW_FNs | KW_EXTERN | KW_LET | KW_CONST | KW_IF | KW_ELSE | KW_WHILE | KW_RETURN | KW_Int | KW_Bool | KW_String | KW_true | KW_false }
KW_FNs    = { "fn" }
KW_EXTERN = { "extern" }
KW_LET    = { "let" }
KW_CONST  = { "const" }
KW_IF     = { "if" }
KW_ELSE   = { "else" }
KW_WHILE  = { "while" }
KW_RETURN = { "return" }
KW_Int    = { "Int" }
KW_Bool   = { "Bool" }
KW_String = { "String" }
KW_true   = { "true" }
KW_false  = { "false" }

OP_OR  = { "||" }
OP_AND = { "&&" }
OP_EQ  = { "==" }
OP_NE  = { "!=" }
OP_LT  = { "<"  }
OP_LE  = { "<=" }
OP_GT  = { ">"  }
OP_GE  = { ">=" }
OP_ADD = { "+"  }
OP_SUB = { "-"  }
OP_MUL = { "*"  }
OP_DIV = { "/"  }
OP_NOT = { "!"  }
