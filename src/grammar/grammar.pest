WHITESPACE   = _{ ( " " | "\t" | "\r" | "\n" | COMMENT )+ }
COMMENT      = _{ LINE_COMMENT | BLOCK_COMMENT }
LINE_COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* }
BLOCK_COMMENT= _{ "/*" ~ (BLOCK_COMMENT | (!"*/" ~ ANY))* ~ "*/" }

program = { SOI ~ item* ~ EOI }

item = { extern_fun | fun_decl | let_decl | import_decl }

fun_decl   = { KW_FNs ~ ident ~ "(" ~ param_list? ~ ")" ~ "->" ~ ty ~ block }
extern_fun = { KW_EXTERN ~ KW_FNs ~ ident ~ "(" ~ param_list? ~ ")" ~ "->" ~ ty ~ ";" }
import_decl = { KW_IMPORT ~ string_lit ~ ";" }

param_list = { param ~ ("," ~ param)* }
param      = { ident ~ ":" ~ ty }

let_decl = { ( KW_LET | KW_CONST ) ~ ident ~ ":" ~ ty ~ "=" ~ expr ~ ";" }

ty = { KW_Int | KW_Long | KW_Bool | KW_String | KW_Double | KW_Float | KW_Char | KW_Void }

block = { "{" ~ stmt* ~ tail_expr? ~ "}" }

stmt  = {
    let_decl
  | assign_stmt
  | while_stmt
  | for_stmt
  | break_stmt
  | continue_stmt
  | if_stmt
  | return_stmt
  | expr_stmt
}

assign_stmt   = { ident ~ "=" ~ expr ~ ";" }

while_stmt  = { KW_WHILE ~ "(" ~ expr ~ ")" ~ block }
for_stmt    = { KW_FOR ~ "(" ~ for_init? ~ ";" ~ expr? ~ ";" ~ for_step? ~ ")" ~ block }
for_init    = {
      (KW_LET | KW_CONST) ~ ident ~ ":" ~ ty ~ "=" ~ expr
    | ident ~ "=" ~ expr
    | expr
}
for_step    = {
      ident ~ "=" ~ expr
    | expr
}

if_stmt     = { KW_IF ~ "(" ~ expr ~ ")" ~ block ~ (KW_ELSE ~ block)? }

break_stmt    = { KW_BREAK ~ ";" }
continue_stmt = { KW_CONTINUE ~ ";" }

return_stmt = { KW_RETURN ~ expr? ~ ";" }
expr_stmt   = { expr ~ ";" }
tail_expr   = { expr }

expr        = { logic_or }
logic_or    = { logic_and ~ (OP_OR  ~ logic_and)* }
logic_and   = { equality  ~ (OP_AND ~ equality )* }
equality    = { compare   ~ ((OP_EQ | OP_NE) ~ compare)* }
compare = { add ~ ((OP_LE | OP_GE | OP_LT | OP_GT) ~ add)* }
add         = { mult      ~ ((OP_ADD | OP_SUB) ~ mult)* }
mult        = { unary     ~ ((OP_MUL | OP_DIV) ~ unary)* }
unary       = { (OP_NOT | OP_SUB) ~ unary | postfix }
postfix     = { primary ~ ( call_suffix )* }
call_suffix = { "(" ~ arg_list? ~ ")" }
arg_list    = { expr ~ ("," ~ expr)* }

primary = { float_lit | long_lit | int_lit | bool_lit | string_lit
          | if_expr | match_expr | ident | group | block | char_lit }
group       = { "(" ~ expr ~ ")" }

if_expr     = { KW_IF ~ "(" ~ expr ~ ")" ~ block ~ KW_ELSE ~ block }

match_expr  = {
    KW_MATCH ~ "(" ~ expr ~ ")" ~ "{" ~ match_arms? ~ "}"
}
match_arms  = {
  (match_arm ~ ("," ~ match_arm)*) ~ ("," ~ match_default)? ~ (",")?
    | match_default ~ (",")?
}
match_arm     = { pattern ~ "=>" ~ block }
match_default = { "_" ~ "=>" ~ block }

pattern = { int_lit | bool_lit | char_lit | "_" }

int_lit    = @{ "-"? ~ ASCII_DIGIT+ }
long_lit = @{ "-"? ~ ASCII_DIGIT+ ~ ("L" | "l") }
bool_lit   = { KW_true | KW_false }
float_lit = @{
  "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ ~ (("e" | "E") ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}
char_lit = @{
  "'" ~ (
      ( !("'" | "\\") ~ ANY )
    | ("\\" ~ ( "'" | "\\" | "n" | "r" | "t" | "0" | ( "u{" ~ ASCII_HEX_DIGIT{1,6} ~ "}" ) ))
  ) ~ "'"
}
string_lit = @{ "\"" ~ ( "\\\"" | "\\\\" | "\\n" | "\\t" | (!"\"" ~ ANY) )* ~ "\"" }

ident = @{ !keyword ~ (ASCII_ALPHANUMERIC | "_")+ }

keyword = {
  (
      KW_FNs | KW_EXTERN | KW_IMPORT | KW_LET | KW_CONST
    | KW_IF | KW_ELSE | KW_WHILE | KW_FOR | KW_BREAK | KW_CONTINUE | KW_MATCH
    | KW_RETURN
    | KW_Int | KW_Long | KW_Bool | KW_String | KW_Double | KW_Float | KW_Char | KW_Void
    | KW_true | KW_false
  ) ~ !(ASCII_ALPHANUMERIC | "_")
}
KW_FNs    = { "fn" }
KW_EXTERN = { "extern" }
KW_IMPORT = { "import" }
KW_LET    = { "let" }
KW_CONST  = { "const" }
KW_IF     = { "if" }
KW_ELSE   = { "else" }
KW_WHILE  = { "while" }
KW_FOR    = { "for" }
KW_BREAK  = { "break" }
KW_CONTINUE = { "continue" }
KW_MATCH  = { "match" }
KW_RETURN = { "return" }
KW_Int    = { "Int" }
KW_Bool   = { "Bool" }
KW_String = { "String" }
KW_Long   = { "Long" }    // i64
KW_Double = { "Double" }  // f64
KW_Float  = { "Float" }   // f32
KW_Char   = { "Char" }    // u32（ABI 用 i32）
KW_Void   = { "Void" }
KW_true   = { "true" }
KW_false  = { "false" }

OP_OR  = { "||" }
OP_AND = { "&&" }
OP_EQ  = { "==" }
OP_NE  = { "!=" }
OP_LT  = { "<"  }
OP_LE  = { "<=" }
OP_GT  = { ">"  }
OP_GE  = { ">=" }
OP_ADD = { "+"  }
OP_SUB = { "-"  }
OP_MUL = { "*"  }
OP_DIV = { "/"  }
OP_NOT = { "!"  }
