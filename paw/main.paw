// PawLang 示例程序
import "std::mem";
import "std::fmt";

// 函数重载示例
fn add(x: Int, y: Int) -> Int { x + y }
fn add(x: Double, y: Double) -> Double { x + y }

// 泛型结构体
struct Point<T> {
  x: T,
  y: T,
}

// 智能指针示例
fn demo_smart_pointers() -> Void {
  println<String>("=== 智能指针示例 ===");
  
  // Box 示例
  let boxed: Box<Int> = Box::new<Int>(42);
  println<Int>(Box::get<Int>(boxed));
  Box::free<Int>(boxed);
  
  // Rc 示例
  let rc1: Rc<String> = Rc::new<String>("Hello, PawLang!");
  let rc2: Rc<String> = Rc::clone<String>(rc1);
  println<String>(Rc::get<String>(rc1));
  println<Int>(Rc::strong_count<String>(rc1));
  Rc::drop<String>(rc2);
  Rc::drop<String>(rc1);
}

// 控制流示例
fn demo_control_flow() -> Void {
  println<String>("=== 控制流示例 ===");
  
  // if-else
  let x: Int = 10;
  if (x > 5) {
    println<String>("x is greater than 5");
  } else {
    println<String>("x is not greater than 5");
  }
  
  // for 循环
  for (let j: Int = 0; j < 3; j = j + 1) {
    println<Int>(j);
  }
}

// 泛型函数示例
fn demo_generics() -> Void {
  println<String>("=== 泛型示例 ===");
  
  // 泛型函数调用
  let int_sum: Int = add(10, 20);
  let double_sum: Double = add(3.14, 2.86);
  
  println<Int>(int_sum);
  println<Double>(double_sum);
  
  // 泛型结构体
  let point: Point<Int> = Point<Int>{ x: 10, y: 20 };
  println<Int>(point.x);
  println<Int>(point.y);
}

// 主函数
fn main() -> Int {
  println<String>("Welcome to PawLang!");
  
  demo_smart_pointers();
  demo_control_flow();
  demo_generics();
  
  println<String>("Example completed successfully!");
  0
}