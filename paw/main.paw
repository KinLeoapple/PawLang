import "std/prelude.paw";

import "generic.paw";
import "traits.paw";

const KInt: Int = 10;
const KLong: Long = 7L;

fn add(a: Int, b: Int) -> Int { return a + b; }

fn main() -> Int {
    let a: Int  = id<Int>(41);
    let b: Long = id<Long>(KLong);

    let c: Int = first<Int, Long>(a, b);
    let d: Int = choose<Int>(true, c, 0);

    let e: Int = id<Int>( id<Int>( id<Int>(1) ) );

    let i: Int = 0;
    while (i < 3) { i = i + 1; }

    for (let j: Int = 0; j < 2; j = j + 1) { }

    let m1: Int = match (a) {
        40 => { 1 },
        41 => { 2 },
        _  => { 3 }
    };

    let ch: Char = 'A';
    let m2: Int = match (ch) {
        'A' => { 10 },
        _   => { 0 }
    };

    let flag: Bool = false;
    let m3: Int = match (flag) {
        true  => { 1 },
        false => { 0 }
    };

    let y: Long = swap<Int, Long>(a, b);

    // 需要 where 约束：T: Eq<T>
    let _z1: Int = needEq<Int>(a, c);
    let _z2: Int = needEq<Long>(b, y);

    let sum: Int = add(d, e) + m1 + m2 + m3 + i + KInt;
    println_int(sum);
    return sum;
}
