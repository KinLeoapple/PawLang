// 覆盖：trait 声明、impl 实例化、限定调用、where 约束、二元 trait

trait Eq<T> {
    fn eq(x: T, y: T) -> Bool;
}

impl Eq<Int> {
    fn eq(x: Int, y: Int) -> Bool {
        x == y
    }
}

impl Eq<Long> {
    fn eq(x: Long, y: Long) -> Bool {
        x == y
    }
}

// 需要一元 trait 约束：T: Eq<T>
// 调用位置使用限定调用：Eq::eq<T>(a, b)
fn needEq<T>(a: T, b: T) -> Int where T: Eq<T> {
    if (Eq::eq<T>(a, b)) {
        return 1;
    } else {
        return 0;
    }
}

trait PairEq<A, B> {
    fn eq2(x: A, y: B) -> Bool;
}

impl PairEq<Int, Long> {
    fn eq2(x: Int, y: Long) -> Bool {
        x == y
    }
}

// where 中的 __Self：对“当前函数所在上下文”的能力约束
fn needPair<T, U>(a: T, b: U) -> Int where __Self: PairEq<T, U> {
    if (PairEq::eq2<T, U>(a, b)) {
        return 1;
    } else {
        return 0;
    }
}
