// 内存
extern fn paw_malloc(size: Int) -> Int;
extern fn paw_free(ptr: Int, cap: Int) -> Int;
extern fn paw_realloc(ptr: Int, old_cap: Int, new_cap: Int) -> Int;

// String（把返回/参数都当作 String 句柄传递即可；底层是指针）
extern fn paw_string_new() -> String;
extern fn paw_string_from_cstr(cptr: Int) -> String;
extern fn paw_string_push_cstr(handle: String, cptr: Int) -> Int;
extern fn paw_string_push_char(handle: String, ch: Int) -> Int;
extern fn paw_string_as_cstr(handle: String) -> Int;
extern fn paw_string_len(handle: String) -> Int;
extern fn paw_string_clear(handle: String) -> Int;
extern fn paw_string_free(handle: String) -> Int;

// Vec<u8>
extern fn paw_vec_u8_new() -> String;          // 用 String 承载句柄
extern fn paw_vec_u8_push(handle: String, b: Int) -> Int;
extern fn paw_vec_u8_len(handle: String) -> Int;
extern fn paw_vec_u8_data_ptr(handle: String) -> Int;
extern fn paw_vec_u8_free(handle: String) -> Int;

// Vec<i64>
extern fn paw_vec_i64_new() -> String;
extern fn paw_vec_i64_push(handle: String, v: Int) -> Int;
extern fn paw_vec_i64_pop(handle: String, out_ptr: Int) -> Int; // out_ptr: Int 指向可写 i64
extern fn paw_vec_i64_len(handle: String) -> Int;
extern fn paw_vec_i64_get(handle: String, idx: Int, out_ptr: Int) -> Int;
extern fn paw_vec_i64_free(handle: String) -> Int;

// 打印
extern fn print_int(x: Int) -> Void;
extern fn println_int(x: Int) -> Void;
extern fn print_long(x: Long) -> Void;
extern fn println_long(x: Long) -> Void;
extern fn print_bool(x: Bool) -> Void;
extern fn println_bool(x: Bool) -> Void;
extern fn print_char(x: Char) -> Void;
extern fn println_char(x: Char) -> Void;
extern fn print_float(x: Float) -> Void;
extern fn println_float(x: Float) -> Void;
extern fn print_double(x: Double) -> Void;
extern fn println_double(x: Double) -> Void;
extern fn print_str(p: String) -> Void;
extern fn println_str(p: String) -> Void;

// 进程退出
extern fn paw_exit(code: Int) -> Void;
