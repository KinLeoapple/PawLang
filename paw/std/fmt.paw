// ---- 运行时外部函数 ----
extern fn print_u8(x: Byte)    -> Void;
extern fn print_i32(x: Int)    -> Void;
extern fn print_i64(x: Long)   -> Void;
extern fn print_f32(x: Float)  -> Void;
extern fn print_f64(x: Double) -> Void;
extern fn print_bool(x: Bool)  -> Void;
extern fn print_char(x: Char)  -> Void;
extern fn print_str(p: String) -> Void;

// 换行与冲刷
extern fn rt_println()    -> Void;
extern fn flush_stdout()  -> Void;

// ---- 可打印 trait ----
pub trait Printable<T> {
    pub fn print(x: T)   -> Void;
    pub fn println(x: T) -> Void;
}

// ---- 各内建类型实现：简单转调 runtime 并 flush ----
pub impl Printable<Byte> {
    pub fn print(x: Byte)   -> Void { print_u8(x);  flush_stdout() }
    pub fn println(x: Byte) -> Void { print_u8(x);  rt_println(); flush_stdout() }
}


pub impl Printable<Int> {
    pub fn print(x: Int)   -> Void { print_i32(x);  flush_stdout() }
    pub fn println(x: Int) -> Void { print_i32(x);  rt_println(); flush_stdout() }
}

pub impl Printable<Long> {
    pub fn print(x: Long)   -> Void { print_i64(x);  flush_stdout() }
    pub fn println(x: Long) -> Void { print_i64(x);  rt_println(); flush_stdout() }
}

pub impl Printable<Float> {
    pub fn print(x: Float)   -> Void { print_f32(x);  flush_stdout() }
    pub fn println(x: Float) -> Void { print_f32(x);  rt_println(); flush_stdout() }
}

pub impl Printable<Double> {
    pub fn print(x: Double)   -> Void { print_f64(x);  flush_stdout() }
    pub fn println(x: Double) -> Void { print_f64(x);  rt_println(); flush_stdout() }
}

pub impl Printable<Bool> {
    pub fn print(x: Bool)   -> Void { print_bool(x);  flush_stdout() }
    pub fn println(x: Bool) -> Void { print_bool(x);  rt_println(); flush_stdout() }
}

pub impl Printable<Char> {
    pub fn print(x: Char)   -> Void { print_char(x);  flush_stdout() }
    pub fn println(x: Char) -> Void { print_char(x);  rt_println(); flush_stdout() }
}

pub impl Printable<String> {
    pub fn print(x: String)   -> Void { print_str(x);  flush_stdout() }
    pub fn println(x: String) -> Void { print_str(x);  rt_println(); flush_stdout() }
}

// ---- 用户可见的泛型入口（1 个类型参数；Paw 的代码生成会自动单态化） ----
pub fn print<T>(x: T) -> Void
where T: Printable<T>
{
    Printable::print<T>(x)
}

pub fn println<T>(x: T) -> Void
where T: Printable<T>
{
    Printable::println<T>(x)
}
