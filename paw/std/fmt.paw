// 打印
extern fn print_i32(x: Int)   -> Void;
extern fn print_i64(x: Long)  -> Void;
extern fn print_f32(x: Float) -> Void;
extern fn print_f64(x: Double)-> Void;
extern fn print_bool(x: Bool) -> Void;
extern fn print_char(x: Char) -> Void;
extern fn print_str(p: String) -> Void;
extern fn rt_println() -> Void;
extern fn flush_stdout() -> Void;

trait Printable<T> {
  fn print(x: T)   -> Void;
  fn println(x: T) -> Void;
}

// ===== 内置实现：转调新的运行时 =====

impl Printable<Int> {
  fn print(x: Int)   -> Void { print_i32(x); flush_stdout() }
  fn println(x: Int) -> Void { print_i32(x); rt_println(); flush_stdout() }
}

impl Printable<Long> {
  fn print(x: Long)   -> Void { print_i64(x); flush_stdout() }
  fn println(x: Long) -> Void { print_i64(x); rt_println(); flush_stdout() }
}

impl Printable<Float> {
  fn print(x: Float)   -> Void { print_f32(x); flush_stdout() }
  fn println(x: Float) -> Void { print_f32(x); rt_println(); flush_stdout() }
}

impl Printable<Double> {
  fn print(x: Double)   -> Void { print_f64(x); flush_stdout() }
  fn println(x: Double) -> Void { print_f64(x); rt_println(); flush_stdout() }
}

impl Printable<Bool> {
  fn print(x: Bool)   -> Void { print_bool(x); flush_stdout() }
  fn println(x: Bool) -> Void { print_bool(x); rt_println(); flush_stdout() }
}

impl Printable<Char> {
  fn print(x: Char)   -> Void { print_char(x); flush_stdout() }
  fn println(x: Char) -> Void { print_char(x); rt_println(); flush_stdout() }
}

impl Printable<String> {
  fn print(x: String)   -> Void { print_str(x); flush_stdout() }
  fn println(x: String) -> Void { print_str(x); rt_println(); flush_stdout() }
}

// ===== 用户可见的入口：print / println =====
fn print<T>(x: T) -> Void
where T: Printable<T>
{
  Printable::print<T>(x)
}

fn println<T>(x: T) -> Void
where T: Printable<T>
{
  Printable::println<T>(x)
}

