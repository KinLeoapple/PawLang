// Paw - 循环示例

fn sum_to_n(n: int) -> int {
    let mut sum = 0;
    let mut i = 1;
    
    loop if i <= n {
        sum += i;
        i += 1;
    }
    
    sum  // 返回值
}

fn factorial(n: int) -> int {
    let mut result = 1;
    
    loop for i in 1..=n {
        result *= i;
    }
    
    result  // 返回值
}

fn find_first_even(numbers: [int]) -> int {
    loop for num in numbers {
        if num % 2 == 0 {
            return num;  // return 需要分号
        }
    }
    0
}

fn count_down(from: int) -> int {
    let mut count = from;
    
    loop if count > 0 {
        println("Count: $count");
        count -= 1;
    }
    
    println("Done!");
    0
}

fn main() -> int {
    println("Sum 1 to 10: ${sum_to_n(10)}");
    println("Factorial 5: ${factorial(5)}");
    
    let numbers = [1, 3, 5, 8, 9];
    println("First even: ${find_first_even(numbers)}");
    
    count_down(5)  // 返回值
}
