// Paw v3 - 模式匹配示例

type Color = enum {
    Red
    Green
    Blue
    RGB(int, int, int)
}

type Option<T> = enum {
    Some(T)
    None
}

fn describe_color(color: Color) -> string {
    color is {
        Red -> "红色"
        Green -> "绿色"
        Blue -> "蓝色"
        RGB(r, g, b) -> "RGB($r, $g, $b)"
    }
}

fn get_value(color: Color) -> int {
    color is {
        Red -> 1
        Green -> 2
        Blue -> 3
        RGB(r, g, b) -> r + g + b
    }
}

fn unwrap_or<T>(option: Option<T>, default: T) -> T {
    option is {
        Some(value) -> value
        None -> default
    }
}

fn main() -> int {
    let red = Red
    let green = Green
    let rgb = RGB(100, 150, 200)
    
    println(describe_color(red))
    println(describe_color(rgb))
    
    let total = get_value(red) + get_value(green) + get_value(rgb)
    
    let some_value = Some(42)
    let none_value: Option<int> = None
    
    println("Some: ${unwrap_or(some_value, 0)}")
    println("None: ${unwrap_or(none_value, 99)}")
    
    total
}

