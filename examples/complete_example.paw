// Paw v3 完整示例 - Web API + 数据库

import http.{Server, Request, Response, Method}
import db.Database
import json.Json

// 用户类型
type User = struct {
    id: i32
    name: string
    email: string
    age: i32
    
    fn validate(self) -> Result<(), string> {
        if self.name.is_empty() { 
            Err("Name cannot be empty") 
        }
        else if !self.email.contains("@") { 
            Err("Invalid email") 
        }
        else if self.age < 0 or self.age > 150 { 
            Err("Invalid age") 
        }
        else { 
            Ok(()) 
        }
    }
    
    fn display(self) -> string {
        "$self.name ($self.email) - $self.age years old"
    }
}

// API 响应类型
type ApiResponse<T> = enum {
    Success(T)
    Error { code: i32, message: string }
    NotFound
    
    fn json(self) -> string {
        self is {
            Success(data) -> Json.encode(data)
            Error { code, message } -> """{"error": {"code": $code, "message": "$message"}}"""
            NotFound -> """{"error": "Not found"}"""
        }
    }
}

// 数据库连接池
type DbPool = struct {
    db: Database
    
    fn new() async -> Result<Self, string> {
        let db = await Database.connect("localhost:5432")?;
        Ok(Self { db })
    }
    
    fn get_by_id(self, id: i32) async -> Result<Option<User>, string> {
        let query = "SELECT * FROM users WHERE id = ?";
        await self.db.query_one(query, [id])
    }
    
    fn create(self, user: User) async -> Result<User, string> {
        user.validate()?;
        let query = "INSERT INTO users (name, email, age) VALUES (?, ?, ?)";
        await self.db.execute(query, [user.name, user.email, user.age])
    }
    
    fn update(self, id: i32, user: User) async -> Result<(), string> {
        user.validate()?;
        let query = "UPDATE users SET name = ?, email = ?, age = ? WHERE id = ?";
        await self.db.execute(query, [user.name, user.email, user.age, id])
    }
    
    fn delete(self, id: i32) async -> Result<(), string> {
        let query = "DELETE FROM users WHERE id = ?";
        await self.db.execute(query, [id])
    }
}

// API 处理器
type UserHandler = struct {
    pool: DbPool
    
    fn handle(self, req: Request) async -> Response {
        req.method is {
            Method.GET -> self.get_user(req).await
            Method.POST -> self.create_user(req).await
            Method.PUT -> self.update_user(req).await
            Method.DELETE -> self.delete_user(req).await
            _ -> Response.method_not_allowed()
        }
    }
    
    fn get_user(self, req: Request) async -> Response {
        let id = req.param("id")? as i32;
        
        let result = self.pool.get_by_id(id).await;
        
        result is {
            Ok(Some(user)) -> Response.json(ApiResponse.Success(user))
            Ok(None) -> Response.json(ApiResponse.NotFound)
            Err(e) -> Response.json(ApiResponse.Error { 
                code: 500, 
                message: e 
            })
        }
    }
    
    fn create_user(self, req: Request) async -> Response {
        let user: User = req.json()?;
        
        let result = self.pool.create(user).await;
        
        result is {
            Ok(created) -> Response.json(ApiResponse.Success(created))
            Err(e) -> Response.json(ApiResponse.Error { 
                code: 400, 
                message: e 
            })
        }
    }
    
    fn update_user(self, req: Request) async -> Response {
        let id = req.param("id")? as i32;
        let user: User = req.json()?;
        
        let result = self.pool.update(id, user).await;
        
        result is {
            Ok(_) -> Response.no_content()
            Err(e) -> Response.json(ApiResponse.Error { 
                code: 400, 
                message: e 
            })
        }
    }
    
    fn delete_user(self, req: Request) async -> Response {
        let id = req.param("id")? as i32;
        
        let result = self.pool.delete(id).await;
        
        result is {
            Ok(_) -> Response.no_content()
            Err(e) -> Response.json(ApiResponse.Error { 
                code: 500, 
                message: e 
            })
        }
    }
}

// 中间件
type AuthMiddleware = struct {
    fn check(req: Request) -> Result<(), Response> {
        let token = req.header("Authorization")?;
        
        if token.starts_with("Bearer ") {
            Ok(())
        } else {
            Err(Response.unauthorized())
        }
    }
}

type LogMiddleware = struct {
    fn log(req: Request) {
        println("${req.method} ${req.path} - ${req.ip()}");
    }
}

// 主服务器
fn main() async -> i32 {
    println("🚀 Starting Paw Web Server...");
    
    // 初始化数据库连接池
    let pool = DbPool.new().await else {
        println("❌ Failed to connect to database");
        return 1;
    };
    
    println("✅ Database connected");
    
    // 创建处理器
    let handler = UserHandler { pool };
    
    // 创建服务器
    let mut server = Server.new("0.0.0.0:8080");
    
    // 注册路由
    server
        .use(LogMiddleware.log)
        .use(AuthMiddleware.check)
        .route("/users/:id", handler.handle)
        .route("/users", handler.handle);
    
    println("🌐 Server running on http://0.0.0.0:8080");
    
    // 启动服务器
    await server.run();
    
    0
}
