// Paw - 模块系统示例

// ========================================
// 文件: math.paw
// ========================================
/*
pub fn add(x: int, y: int) -> int = x + y
pub fn multiply(x: int, y: int) -> int = x * y

pub type Calculator = struct {
    result: int
    
    pub fn new() -> Self {
        Calculator { result: 0 }
    }
    
    pub fn add(mut self, x: int) -> Self {
        self.result += x
        self
    }
    
    pub fn get(self) -> int {
        self.result
    }
}
*/

// ========================================
// 文件: main.paw
// ========================================

// 单个导入
// import math.add

// 多个导入
// import math.{add, multiply, Calculator}

// 全部导入
// import math.*

// 别名导入
// import math.Calculator as Calc

fn main() -> int {
    // 使用导入的函数
    // let sum = add(2, 3)
    // let product = multiply(4, 5)
    
    // 使用导入的类型
    // let calc = Calculator.new()
    //     .add(10)
    //     .add(20)
    //     .add(30)
    
    // println("Sum: $sum")
    // println("Product: $product")
    // println("Calculator result: ${calc.get()}")
    
    println("模块系统示例（需要多文件支持）")
    0
}

// ========================================
// 模块组织示例
// ========================================

/*
项目结构：

myapp/
├── main.paw
├── user.paw
├── database.paw
└── utils/
    ├── mod.paw
    ├── string.paw
    └── math.paw

导入示例：

// main.paw
import user.User
import database.Database
import utils.string.format
import utils.math.{add, multiply}

fn main() -> int {
    let user = User.new("Alice")
    let db = Database.connect("localhost")
    let formatted = format("Hello, ${user.name}")
    println(formatted)
    0
}

// user.paw
pub type User = struct {
    pub name: string
    
    pub fn new(name: string) -> Self {
        User { name }
    }
}

// utils/mod.paw
pub import string.*
pub import math.*

// utils/string.paw
pub fn format(text: string) -> string {
    text.trim()
}

// utils/math.paw
pub fn add(x: int, y: int) -> int = x + y
pub fn multiply(x: int, y: int) -> int = x * y
*/

