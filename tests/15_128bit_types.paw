// 测试 15: 128位整数类型

// 128位有符号整数
fn test_i128() -> i128 {
    let huge: i128 = 170141183460469231731687303715884105727;
    let result: i128 = huge;
    result
}

// 128位无符号整数
fn test_u128() -> u128 {
    let massive: u128 = 340282366920938463463374607431768211455;
    let result: u128 = massive;
    result
}

// 类型转换到 128 位
fn upcast_to_128() -> i128 {
    let a: i8 = 10;
    let b: i16 = 20;
    let c: i32 = 30;
    let d: i64 = 40;
    
    // 所有小类型都可以安全转换到 i128
    a as i128 + b as i128 + c as i128 + d as i128
}

// 从 128 位转换下来
fn downcast_from_128() -> i64 {
    let huge: i128 = 1000000000;
    huge as i64
}

// 无符号 128 位转换
fn unsigned_128_conversions() -> u64 {
    let large: u128 = 1000000;
    large as u64
}

fn main() -> i32 {
    let r1 = upcast_to_128() as i32;
    let r2 = downcast_from_128() as i32;
    
    r1 + r2
}

