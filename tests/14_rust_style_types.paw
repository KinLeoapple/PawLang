// 测试 14: Rust 风格细化类型系统

// 有符号整数类型
fn test_signed_integers() -> i32 {
    let tiny: i8 = 127;        // -128 to 127
    let small: i16 = 32767;    // -32768 to 32767
    let normal: i32 = 2147483647;
    let large: i64 = 9223372036854775807;
    
    tiny as i32 + small as i32
}

// 无符号整数类型
fn test_unsigned_integers() -> u32 {
    let byte: u8 = 255;        // 0 to 255
    let word: u16 = 65535;     // 0 to 65535
    let dword: u32 = 4294967295;
    let qword: u64 = 18446744073709551615;
    
    byte as u32 + word as u32
}

// 浮点类型
fn test_float_types() -> f64 {
    let single: f32 = 3.14;
    let double: f64 = 2.718281828;
    
    single as f64 + double
}

// 类型转换测试
fn test_type_conversion() -> i64 {
    let a: i8 = 10;
    let b: i16 = 20;
    let c: i32 = 30;
    let d: i64 = 40;
    
    // 向上转换
    let sum = a as i64 + b as i64 + c as i64 + d;
    sum
}

// 无符号到有符号转换
fn test_unsigned_to_signed() -> i32 {
    let unsigned: u32 = 100;
    unsigned as i32
}

// 浮点转整数
fn test_float_to_int() -> i32 {
    let f: f64 = 42.7;
    f as i32
}

// 整数转浮点
fn test_int_to_float() -> f64 {
    let i: i32 = 42;
    i as f64
}

// 类型别名（兼容性）
fn test_aliases() -> i32 {
    let x: i32 = 42;      // = i32
    let y: uint = 10;     // = u32
    let z: f64 = 3.14;  // = f64
    let b: u8 = 255;    // = u8
    
    x + y as int
}

// 混合使用
type Point = struct {
    x: i32
    y: i32
    
    fn distance_squared(self) -> i64 {
        let dx = self.x as i64;
        let dy = self.y as i64;
        dx * dx + dy * dy
    }
}

type Color = struct {
    r: u8
    g: u8
    b: u8
    a: u8
}

fn main() -> i32 {
    let r1 = test_signed_integers();
    let r2 = test_unsigned_integers() as i32;
    let r3 = test_float_types() as i32;
    let r4 = test_type_conversion() as i32;
    
    let p = Point { x: 3, y: 4 };
    let dist = p.distance_squared() as i32;
    
    let color = Color { r: 255, g: 128, b: 0, a: 255 };
    
    r1 + r2 + r3 + r4 + dist
}

