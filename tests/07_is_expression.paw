// 测试 7: is 模式匹配表达式

type Option = enum {
    Some(int)
    None
}

type Result = enum {
    Ok(int)
    Err(string)
}

// 测试基础 is 表达式
fn unwrap_or(opt: Option, default: i32) -> i32 {
    opt is {
        Some(value) -> value
        None -> default
    }
}

// 测试带 if guard 的 is 表达式
fn classify(x: i32) -> string {
    x is {
        0 -> "zero"
        _ -> "other"
    }
}

// 测试复杂模式
fn handle_result(r: Result) -> i32 {
    r is {
        Ok(val) -> val
        Err(msg) -> 0
    }
}

fn main() -> i32 {
    let opt1 = Some(42);
    let opt2 = None;
    
    let r1 = unwrap_or(opt1, 0);
    let r2 = unwrap_or(opt2, 100);
    
    let r3 = classify(0);
    let r4 = classify(42);
    
    r1 + r2
}

